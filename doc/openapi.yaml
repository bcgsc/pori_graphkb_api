
openapi: 3.0.0
info:
    title: Graph KB
    description: API for accessing the graph knowledgebase

servers:
    - url: http://10.9.202.242:8088/api/
      description: test server

tags:
    - name: Admin
      description: Administrative operations for adding, editing, and removing users
    - name: Diseases
      description: Operations to do with disease ontology terms
    - name: Anatomical Entities
      description: Anatomical entities describe body parts, tissues, and organs
    - name: Features
      description: >
        Features which ares used as reference points for describing variants.
        Generally these are genes, proteins, domains, etc.
    - name: Therapies
      description: Therapies includes listing of drugs, protocols, and any other treatments

paths:
    /users:
        parameters:
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: returns a list of users
            tags:
                - Admin
            parameters:
                - in: query
                  name: name
                  schema:
                    type: string
                  description: the user name
                - $ref: '#/components/parameters/returnProperties'
                  example: 'name,createdAt'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                    links:
                        getUserById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1users~1{id}/get'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in GET `/users/{id}`.
                        patchUserById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1users~1{id}/patch'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in PATCH `/users/{id}`.
                        deleteUserById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1users~1{id}/delete'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in DELETE `/users/{id}`.
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '400':
                    $ref: '#/components/responses/BadInput'
        post:
            summary: add a new user
            tags:
                - Admin
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '409':
                    $ref: '#/components/responses/RecordExistsError'
                '400':
                    $ref: '#/components/responses/BadInput'
    /users/{id}:
        parameters:
            - $ref: '#/components/parameters/@rid'
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: return a particular user
            tags:
                - Admin
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        patch:
            summary: alter an existing user record
            tags:
                - Admin
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        delete:
            summary: delete a user record
            tags:
                - Admin
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
    /diseases:
        parameters:
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: returns a list of disease terms
            tags:
                - Diseases
            parameters:
                - $ref: '#/components/parameters/Ontology/name'
                - $ref: '#/components/parameters/Ontology/source'
                - $ref: '#/components/parameters/Ontology/sourceId'
                - $ref: '#/components/parameters/Ontology/sourceVersion'
                - $ref: '#/components/parameters/Ontology/longName'
                - $ref: '#/components/parameters/Ontology/sourceIdVersion'
                - $ref: '#/components/parameters/limit'
                - $ref: '#/components/parameters/returnProperties'
                  example: 'name,source'
                - $ref: '#/components/parameters/ancestors'
                - $ref: '#/components/parameters/descendants'
                - $ref: '#/components/parameters/fuzzyMatch'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#components/schemas/Disease'
                    links:
                        getDiseaseById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1diseases~1{id}/get'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in GET `/diseases/{id}`.
                        patchDiseaseById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1diseases~1{id}/patch'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in PATCH `/diseases/{id}`.
                        deleteDiseaseById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1diseases~1{id}/delete'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in DELETE `/diseases/{id}`.
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '400':
                    $ref: '#/components/responses/BadInput'
        post:
            summary: add a new disease term record
            tags:
                - Diseases
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Disease'
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Disease'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '409':
                    $ref: '#/components/responses/RecordExistsError'
                '400':
                    $ref: '#/components/responses/BadInput'
    /diseases/{id}:
        parameters:
            - $ref: '#/components/parameters/@rid'
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: return a particular disease record
            tags:
                - Diseases
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Disease'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        patch:
            summary: alter a particular disease record
            tags:
                - Diseases
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Disease'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        delete:
            summary: delete a particular disease record
            tags:
                - Diseases
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Disease'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
    /anatomicalentities:
        parameters:
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: returns a list of anatomical entity terms
            tags:
                - Anatomical Entities
            parameters:
                - $ref: '#/components/parameters/Ontology/name'
                - $ref: '#/components/parameters/Ontology/source'
                - $ref: '#/components/parameters/Ontology/sourceId'
                - $ref: '#/components/parameters/Ontology/sourceVersion'
                - $ref: '#/components/parameters/Ontology/longName'
                - $ref: '#/components/parameters/Ontology/sourceIdVersion'
                - $ref: '#/components/parameters/returnProperties'
                  example: 'name,source'
                - $ref: '#/components/parameters/ancestors'
                - $ref: '#/components/parameters/descendants'
                - $ref: '#/components/parameters/fuzzyMatch'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#components/schemas/AnatomicalEntity'
                    links:
                        getAnatomicalEntityById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1anatomicalentities~1{id}/get'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in GET `/anatomicalentities/{id}`.
                        patchAnatomicalEntityById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1anatomicalentities~1{id}/patch'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in PATCH `/anatomicalentities/{id}`.
                        deleteAnatomicalEntityById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1anatomicalentities~1{id}/delete'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in DELETE `/anatomicalentities/{id}`.
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '400':
                    $ref: '#/components/responses/BadInput'
        post:
            summary: add a new anatomical entity record
            tags:
                - Anatomical Entities
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AnatomicalEntity'
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AnatomicalEntity'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '409':
                    $ref: '#/components/responses/RecordExistsError'
                '400':
                    $ref: '#/components/responses/BadInput'
    /anatomicalentities/{id}:
        parameters:
            - $ref: '#/components/parameters/@rid'
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: return a particular anatomical entity record
            tags:
                - Anatomical Entities
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AnatomicalEntity'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        patch:
            summary: alter a particular anatomical entity record
            tags:
                - Anatomical Entities
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AnatomicalEntity'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        delete:
            summary: delete a particular anatomical entity record
            tags:
                - Anatomical Entities
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AnatomicalEntity'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
    /therapies:
        parameters:
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: returns a list of therapy terms
            tags:
                - Therapies
            parameters:
                - $ref: '#/components/parameters/Ontology/name'
                - $ref: '#/components/parameters/Ontology/source'
                - $ref: '#/components/parameters/Ontology/sourceId'
                - $ref: '#/components/parameters/Ontology/sourceVersion'
                - $ref: '#/components/parameters/Ontology/longName'
                - $ref: '#/components/parameters/Ontology/sourceIdVersion'
                - $ref: '#/components/parameters/returnProperties'
                  example: 'name,source'
                - $ref: '#/components/parameters/ancestors'
                - $ref: '#/components/parameters/descendants'
                - $ref: '#/components/parameters/fuzzyMatch'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#components/schemas/Therapy'
                    links:
                        getTherapyById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1therapies~1{id}/get'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in GET `/therapies/{id}`.
                        patchTherapyById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1therapies~1{id}/patch'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in PATCH `/therapies/{id}`.
                        deleteTherapyById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1therapies~1{id}/delete'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in DELETE `/therapies/{id}`.
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '400':
                    $ref: '#/components/responses/BadInput'
        post:
            summary: add a new therapy record
            tags:
                - Therapies
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Therapy'
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Therapy'
                    links:
                        getTherapyById:
                            parameters:
                                id: $response.body#/@rid
                            operationRef: '#/paths/~1therapies~1{id}/get'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in GET `/users/{id}`.
                        editTherapyById:
                            parameters:
                                id: $response.body#/@rid
                            operationRef: '#/paths/therapies/{id}/patch'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in PATCH `/users/{id}`.
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '409':
                    $ref: '#/components/responses/RecordExistsError'
                '400':
                    $ref: '#/components/responses/BadInput'
    /therapies/{id}:
        parameters:
            - $ref: '#/components/parameters/@rid'
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: return a particular therapy record
            tags:
                - Therapies
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Therapy'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        patch:
            summary: alter a particular therapy record
            tags:
                - Therapies
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Therapy'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        delete:
            summary: delete a particular therapy record
            tags:
                - Therapies
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Therapy'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
    /independantfeatures:
        parameters:
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: returns a list of features (independant)
            tags:
                - Features
            parameters:
                - $ref: '#/components/parameters/Ontology/name'
                - $ref: '#/components/parameters/Ontology/source'
                - $ref: '#/components/parameters/Ontology/sourceId'
                - $ref: '#/components/parameters/Ontology/sourceVersion'
                - $ref: '#/components/parameters/Ontology/longName'
                - $ref: '#/components/parameters/Ontology/sourceIdVersion'
                - $ref: '#/components/parameters/limit'
                - $ref: '#/components/parameters/returnProperties'
                  example: 'name,source'
                - $ref: '#/components/parameters/Feature/biotype'
                - $ref: '#/components/parameters/ancestors'
                - $ref: '#/components/parameters/descendants'
                - $ref: '#/components/parameters/fuzzyMatch'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#components/schemas/IndependantFeature'
                    links:
                        getIndependantFeatureById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1independantfeatures~1{id}/get'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in GET `/independantfeatures/{id}`.
                        patchIndependantFeatureById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1independantfeatures~1{id}/patch'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in PATCH `/independantfeatures/{id}`.
                        deleteIndependantFeatureById:
                            allOf:
                                - $ref: '#/components/links/byId'
                            operationRef: '#/paths/~1independantfeatures~1{id}/delete'
                            description: >
                                The `@rid` value returned in the response can be used as
                                the `id` parameter in DELETE `/independantfeatures/{id}`.
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '400':
                    $ref: '#/components/responses/BadInput'
        post:
            summary: add a new featuer (independant) record
            tags:
                - Features
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IndependantFeature'
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IndependantFeature'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '409':
                    $ref: '#/components/responses/RecordExistsError'
                '400':
                    $ref: '#/components/responses/BadInput'
    /independantfeatures/{id}:
        parameters:
            - $ref: '#/components/parameters/@rid'
            - $ref: '#/components/parameters/Authorization'
        get:
            summary: return a particular feature (independant) record
            tags:
                - Features
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IndependantFeature'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        patch:
            summary: alter a particular feature (independant) record
            tags:
                - Features
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IndependantFeature'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'
        delete:
            summary: delete a particular feature (independant) record
            tags:
                - Features
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IndependantFeature'
                '401':
                    $ref: '#/components/responses/NotAuthorized'
                '404':
                    $ref: '#/components/responses/RecordNotFound'
                '400':
                    $ref: '#/components/responses/BadInput'



components:
    links:
        byId:
            parameters:
                id: $response.body#/@rid
    responses:
        NotAuthorized:
            description: authorization failed or insufficient permissions were found
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        RecordNotFound:
            description: the record does not exist
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        RecordExistsError:
            description: the record already exists
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
                        properties:
                            name:
                                example: RecordExistsError
        BadInput:
            description: bad request contains invalid input
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
                        properties:
                            name:
                                example: AttributeError
    parameters:
        returnProperties:
            in: query
            name: returnProperties
            schema:
                type: string
            description: csv list of attributes to return. Returns the whole record if not specified
        limit:
            in: query
            name: limit
            schema:
                type: integer
                nullable: true
            description: limits the number of records to return
            default: 1000
        fuzzyMatch:
            in: query
            name: fuzzyMatch
            schema:
                type: integer
            description: indicates that aliasof and deprecatedby links should be followed when matching ontology terms to 'n' degrees away
        ancestors:
            in: query
            name: ancestors
            schema:
                type: string
            description: csv list of edge class names for which to get all ancestors (follows ingoing edges) of any matched nodes
        descendants:
            in: query
            name: descendants
            schema:
                type: string
            description: csv list of edge class names for which to get all descendants (follows outgoing edges) of any matched nodes
        Authorization:
            in: header
            name: Authorization
            schema:
                type: string
                format: token
            description: token containing the user information/authentication
        '@rid':
            in: path
            name: '@rid'
            schema:
                type: string
            description: record identifier
            example: '#34:1'
        createdAt:
            in: query
            name: createdAt
            schema:
                type: integer
            description: when the record was created
        createdBy:
            in: query
            name: createdBy
            description: the recordID of the user who created the record
            schema:
                type: string
        deletedAt:
            in: query
            name: deletedAt
            description: if given, indicates the time at which a record has been deleted. null for active records
            schema:
                type: integer
                nullable: true
        deletedBy:
            name: deletedBy
            in: query
            description: the recordID of the user who deleted the record
            schema:
                type: string
                nullable: true
        history:
            in: query
            name: history
            description: the recordID of the previous version of this record
            schema:
                type: string
                nullable: true
        uuid:
            name: uuid
            in: query
            description: record id that will be common for all versions of a given record
            schema:
                type: string
                format: uuid
        Feature:
            biotype:
                name: biotype
                in: query
                description: the biological type classification of the feature
                schema:
                    type: string
        Ontology:
            description:
                name: description
                in: query
                schema:
                    type: string
                    nullable: true
                description: paragraph describing/defining the ontology term
            longName:
                name: longName
                in: query
                schema:
                    type: string
                    nullable: true
                description: extended name field for more verbose descriptor
            name:
                name: name
                in: query
                schema:
                    type: string
                description: the name of the ontology term
            sourceIdVersion:
                name: sourceIdVersion
                in: query
                schema:
                    type: string
                description: the version of the name (from the external source)
            source:
                name: source
                in: query
                schema:
                    type: string
                description: the name of the external source the ontology term is derived from
            sourceId:
                name: sourceId
                in: query
                schema:
                    type: string
                    nullable: true
                description: the ID in the external source
            sourceVersion:
                name: sourceVersion
                in: query
                schema:
                    type: string
                    nullable: true
                description: the version of the external source
            subsets:
                in: query
                name: subsets
                schema:
                    type: string
                description: ontology subset this term belongs to
    schemas:
        Error:
            type: object
            properties:
                message:
                    type: string
                    description: the error message
                name:
                    type: string
                    description: the name of the type of error
                stacktrace:
                    type: string
                    description: optionally the error may include a stack trace to aid in debugging
        ODB:
            type:
                object
            properties:
                '@rid':
                    type: string
                    example: '#44:1'
                    pattern: '^#\d+:\d+$'
        UserGroup:
            allOf:
                - $ref: '#/components/schemas/ODB'
            type: object
            properties:
                name:
                    type: string
                    description: name of the user group
                permissions:
                    type: object
        User:
            allOf:
                - $ref: '#/components/schemas/ODB'
            type: object
            required:
                - name
            properties:
                name:
                    type: string
                createdAt:
                    description: when the record was created
                    type: integer
                deletedAt:
                    type: integer
                    nullable: true
                groups:
                    type: array
                    items:
                        $ref: '#/components/schemas/UserGroup'
                history:
                    oneOf:
                        - type: string
                          example: '#47:2'
                        - $ref: '#/components/schemas/User'
                    nullable: true
        Ontology:
            allOf:
                - $ref: '#/components/schemas/ODB'
            type: object
            required:
                - sourceId
                - source
            properties:
                description:
                    type: string
                    nullable: true
                    description: paragraph describing/defining the ontology term
                longName:
                    type: string
                    description: extended name field for more verbose descriptor
                    nullable: true
                name:
                    type: string
                    description: the name of the ontology term
                sourceIdVersion:
                    type: string
                    description: the version of the name (from the external source)
                source:
                    type: string
                    description: the name of the external source the ontology term is derived from
                sourceId:
                    type: string
                    nullable: true
                    description: the ID in the external source
                sourceVersion:
                    type: string
                    nullable: true
                    description: the version of the external source
                subsets:
                    type: array
                    description: ontology subset(s) this term belongs to
                    items:
                        type: string
        Disease:
            allOf:
                - $ref: '#/components/schemas/Ontology'
            type: object
            properties:
                name:
                    example: cancer
                source:
                    example: disease ontology
                sourceVersion:
                    example: "2018-03-02"
                sourceId:
                    example: "doid:162"
                description:
                    example: "a disease of cellular proliferation that is malignant and primary ..."
                subsets:
                    items:
                        example: "doid#DO_AGR_slim"
        AnatomicalEntity:
            allOf:
                - $ref: '#/components/schemas/Ontology'
            type: object
            properties:
                name:
                    example: peripheral nervous system
                source:
                    example: uberon
                sourceId:
                    example: "uberon:0000010"
                description:
                    example: "a major division of the nervous system that contains ..."
                subsets:
                    items:
                        example: "uberon/core#uberon_slim"
        Therapy:
            allOf:
                - $ref: '#/components/schemas/Ontology'
            type: object
            properties:
                name:
                    example: carboplatin
                source:
                    example: ncit
                sourceId:
                    example: ncit:c1282
                description:
                    example: "a second-generation platinum compound with a broad spectrum of antineoplastic properties..."
        Feature:
            type: object
            required:
                - biotype
            properties:
                biotype:
                    type: string
                    description: the biological feature type
                    example: gene
        IndependantFeature:
            allOf:
                - $ref: '#/components/schemas/Ontology'
                - $ref: '#/components/schemas/Feature'
            type: object
            properties:
                source:
                    example: hgnc
                sourceId:
                    example: "hgnc:1097"
                biotype:
                    example: gene
                name:
                    example: braf
                sourceIdVersion:
                    example: "2018-04-20"
                longName:
                    example: "b-raf proto-oncogene, serine/threonine kinase"





